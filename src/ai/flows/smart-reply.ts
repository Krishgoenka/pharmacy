
'use server';

/**
 * @fileOverview Smart reply suggestions for customer inquiries in the contact form and WhatsApp support.
 *
 * - smartReply - A function that suggests quick replies using AI for common inquiries.
 * - SmartReplyInput - The input type for the smartReply function.
 * - SmartReplyOutput - The return type for the smartReply function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SmartReplyInputSchema = z.object({
  customerInquiry: z
    .string()
    .describe('The customer inquiry message from the contact form or WhatsApp support.'),
});
export type SmartReplyInput = z.infer<typeof SmartReplyInputSchema>;

const SmartReplyOutputSchema = z.object({
  suggestedReplies: z
    .array(z.string())
    .describe('An array of suggested quick replies generated by AI.'),
});
export type SmartReplyOutput = z.infer<typeof SmartReplyOutputSchema>;

export async function smartReply(input: SmartReplyInput): Promise<SmartReplyOutput> {
  return smartReplyFlow(input);
}

const smartReplyPrompt = ai.definePrompt({
  name: 'smartReplyPrompt',
  input: {schema: SmartReplyInputSchema},
  output: {schema: SmartReplyOutputSchema},
  prompt: `You are an AI assistant that suggests quick replies for customer inquiries related to a pharmacy called Mahendra Pharmacy.

  Generate a maximum of 3 suggested replies based on the following customer inquiry:
  {{customerInquiry}}

  Each suggested reply should be concise and relevant to the inquiry.
  Format the output as a JSON array of strings.
  `,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const smartReplyFlow = ai.defineFlow(
  {
    name: 'smartReplyFlow',
    inputSchema: SmartReplyInputSchema,
    outputSchema: SmartReplyOutputSchema,
  },
  async input => {
    const {output} = await smartReplyPrompt(input);
    return output!;
  }
);
